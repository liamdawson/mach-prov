#!/bin/bash

export ARCH_PACKAGES="${ARCH_PACKAGES:-} btrfs-progs snapper refind-efi mesa wpa_supplicant intel-ucode"
MAIN_HDD_DEVICE="/dev/nvme0n1"

function partition_path() {
  echo "${MAIN_HDD_DEVICE}p$1"
}

function device_prepare() {
  bstrp_info 'formatting machine...'

  # format:

  # EFI (FAT32, 300MB)
  EFI_PART_SIZE="300"
  EFI_PART_START="1"
  EFI_PART_END="$(($EFI_PART_START + $EFI_PART_SIZE))"

  # Swap (Encrypted Swap, 1MB part header + 4096MB)
  SWAP_PART_SIZE="4097"
  SWAP_PART_START="$EFI_PART_END"
  SWAP_PART_END="$(($SWAP_PART_START + $SWAP_PART_SIZE))"

  # Arch space (BTRFS, 163840MB)
  ROOT_PART_SIZE="163840"
  ROOT_PART_START="$SWAP_PART_END"
  ROOT_PART_END="$(($ROOT_PART_START + $ROOT_PART_SIZE))"

  # LFS? (ext4, 40960MB)
  LFS_PART_SIZE="40960"
  LFS_PART_START="$ROOT_PART_END"
  LFS_PART_END="$(($LFS_PART_START + $LFS_PART_SIZE))"

  # Free for Windows (none, 315092MB)

  # 1. Create GPT table

  parted -s -a optimal "$MAIN_HDD_DEVICE" mktable gpt

  # 2. Create and format the desired partitions
  parted -s -a optimal "$MAIN_HDD_DEVICE" mkpart primary fat32 "${EFI_PART_START}M" "${EFI_PART_END}M"
  parted -s -a optimal "$MAIN_HDD_DEVICE" mkpart primary linux-swap "${SWAP_PART_START}M" "${SWAP_PART_END}M"
  parted -s -a optimal "$MAIN_HDD_DEVICE" mkpart primary btrfs "${ROOT_PART_START}M" "${ROOT_PART_END}M"
  parted -s -a optimal "$MAIN_HDD_DEVICE" mkpart primary ext4 "${LFS_PART_START}M" "${LFS_PART_END}M"

  parted -s -a optimal "$MAIN_HDD_DEVICE" name 1 "efi"
  parted -s -a optimal "$MAIN_HDD_DEVICE" name 2 "scrypted"
  parted -s -a optimal "$MAIN_HDD_DEVICE" name 3 "archroot"
  parted -s -a optimal "$MAIN_HDD_DEVICE" name 4 "lfs"

  # 3. Make filesystems

  mkfs.fat -F32 "$(partition_path 1)"
  # make the filesystem 1M, to keep a pointer for the UUID
  mkfs.ext2 -F -L scrypted "$(partition_path 2)" 1M
  mkfs.btrfs -f "$(partition_path 3)"
  mkfs.ext4 -F "$(partition_path 4)"

  # 4. Create BTRFS subvolumes

  mount "$(partition_path 3)" /mnt
  btrfs subvolume create /mnt/@root
  btrfs subvolume create /mnt/@var
  btrfs subvolume create /mnt/@home

  umount /mnt

  bstrp_info 'mounting volumes...'

  mount -o noatime,compress=lzo,space_cache,ssd,subvol=@root "$(partition_path 3)" /mnt
  mkdir /mnt/{boot,var,home}
  mount -o noatime,compress=lzo,space_cache,ssd,subvol=@var "$(partition_path 3)" /mnt/var
  mount -o noatime,compress=lzo,space_cache,ssd,subvol=@home "$(partition_path 3)" /mnt/home
  mkdir /mnt/boot/efi
  mount "$(partition_path 1)" /mnt/boot/efi

  # run the os base prepare script
  os_prepare

  bstrp_info 'preparing encrypted swap...'

  echo 'swap	LABEL=scrypted	/dev/urandom	swap,offset=2048,cipher=aes-xts-plain64,size=256' >> /mnt/etc/crypttab

  echo '/dev/mapper/swap	none	swap	defaults	0	0' >> /mnt/etc/fstab

  bstrp_info 'device prepare complete!'
}

function device_install() {
  os_install

  bstrp_info 'blacklisting nouveau...'

  echo 'blacklist nouveau' > /etc/modprobe.d/10-blacklist-nouveau.conf

  bstrp_info 'preparing fstab for swappable root snapshot...'

  # pass root vol via boot instead of fstab
  # (e.g. for booting from snapshots later)
  sed -e 's/^.*@root.*$//' "/etc/fstab" -i

  bstrp_info 'installing bootloader...'

  REFIND_CONFIG_LOCATION="/boot/refind_linux.conf"
  BOOT_PART_UUID="$(blkid "$(partition_path 3)" | grep -oP ' UUID="\K[^"]+(?=")')"
  BOOT_STANZA='"Boot with default options"  "root=UUID='"$BOOT_PART_UUID"' rootflags=rw,subvol=@root add_efi_memmap initrd=@root/boot/intel-ucode.img initrd=@root/boot/initramfs-linux.img"'

  # write the default boot configuration
  echo "$BOOT_STANZA" > "$REFIND_CONFIG_LOCATION"

  refind-install

  # search the correct BTRFS subvolume for boot files
  sed -e 's|^#also_scan_dirs.*$|also_scan_dirs @root/boot|' /boot/efi/EFI/refind/refind.conf -i

  bstrp_info 'adding service to create snapshot on first boot...'

  cp "$BOOTSTRAP_OS_DIR/data/btrfs/firstbootsnapshot.service" /etc/systemd/system/firstbootsnapshot.service
  systemctl enable firstbootsnapshot

  bstrp_info 'completed device install!'

  os_install_cleanup
}

function device_update() {
  os_update

  bstrp_info 'configuring kmscon...'
  trizen -Sy kmscon

  [[ -d '/etc/kmscon/' ]] || (sudo mkdir /etc/kmscon && sudo chmod 0755 /etc/kmscon)
  sudo cp "$BOOTSTRAP_OS_DIR/data/xps15/kmscon.conf" '/etc/kmscon/kmscon.conf'

  sudo ln -s /usr/lib/systemd/system/kmsconvt\@.service /etc/systemd/system/autovt\@.service
}

source "$BOOTSTRAP_OS_DIR/base"
