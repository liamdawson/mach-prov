#!/bin/bash

export ARCH_PACKAGES="${ARCH_PACKAGES:-} btrfs-progs snapper refind-efi mesa wpa_supplicant intel-ucode xf86-video-intel bumblebee nvidia"
MAIN_HDD_DEVICE="/dev/nvme0n1"

function partition_path() {
  echo "${MAIN_HDD_DEVICE}p$1"
}

function device_prepare() {
  bstrp_info 'formatting machine...'

  # format:
  # (only partitioning is 'automatic' - partition flags and mounting all manual below)

  # in MiB, not MB
  PARTITION_SIZES=( 499 100 16 256000 4097 180224 )
  PARTITION_FORMATS=( ntfs fat32 '' ntfs linux-swap btrfs )
  PARTITION_NAMES=( "Basic data partition" "EFI system partition" "Microsoft reserved partition" "Basic data partition" "scrypted" "archroot" )
  PARTITION_COMMAND=( "mkfs.ntfs -f -F %s" "mkfs.fat -F32 %s" "true %s" "mkfs.ntfs -f -F %s" "mkfs.ext2 -F -L scrypted %s 1M" "mkfs.btrfs -f %s" )

  parted -s -a optimal "$MAIN_HDD_DEVICE" mktable gpt

  LAST_END="1"
  for i in "${!PARTITION_SIZES[@]}"
  do
    END="$(($LAST_END + ${PARTITION_SIZES[$i]}))"
    parted -s -a optimal "$MAIN_HDD_DEVICE" mkpart primary "${PARTITION_FORMATS[$i]}" "${LAST_END}MiB" "${END}MiB"
    parted -s -a optimal "$MAIN_HDD_DEVICE" name "$(($i + 1))" "\"${PARTITION_NAMES[$i]}\""
    eval "$(printf "${PARTITION_COMMAND[$i]}" "$(partition_path $(($i + 1)))")"
    LAST_END="$END"
  done

  # end automatic section

  parted -s -a optimal "$MAIN_HDD_DEVICE" set 1 hidden on
  parted -s -a optimal "$MAIN_HDD_DEVICE" set 1 diag on
  parted -s -a optimal "$MAIN_HDD_DEVICE" set 2 boot on
  parted -s -a optimal "$MAIN_HDD_DEVICE" set 2 esp on
  parted -s -a optimal "$MAIN_HDD_DEVICE" set 3 msftres on
  parted -s -a optimal "$MAIN_HDD_DEVICE" set 4 msftdata on

  # 4. Create BTRFS subvolumes

  mount "$(partition_path 6)" /mnt
  btrfs subvolume create /mnt/@root
  btrfs subvolume create /mnt/@var
  btrfs subvolume create /mnt/@home

  umount /mnt

  bstrp_info 'mounting volumes...'

  mount -o noatime,compress=lzo,space_cache,ssd,subvol=@root "$(partition_path 6)" /mnt
  mkdir /mnt/{boot,var,home}
  mount -o noatime,compress=lzo,space_cache,ssd,subvol=@var "$(partition_path 6)" /mnt/var
  mount -o noatime,compress=lzo,space_cache,ssd,subvol=@home "$(partition_path 6)" /mnt/home
  mkdir /mnt/boot/efi
  mount "$(partition_path 2)" /mnt/boot/efi

  # run the os base prepare script
  os_prepare

  bstrp_info 'preparing encrypted swap...'

  echo 'swap	LABEL=scrypted	/dev/urandom	swap,offset=2048,cipher=aes-xts-plain64,size=256' >> /mnt/etc/crypttab

  echo '/dev/mapper/swap	none	swap	defaults	0	0' >> /mnt/etc/fstab

  bstrp_info 'device prepare complete!'
}

function device_install() {
  os_install

  bstrp_info 'blacklisting nouveau...'

  echo 'blacklist nouveau' > /etc/modprobe.d/10-blacklist-nouveau.conf

  bstrp_info 'preparing fstab for swappable root snapshot...'

  # pass root vol via boot instead of fstab
  # (e.g. for booting from snapshots later)
  sed -e 's/^.*@root.*$//' "/etc/fstab" -i

  bstrp_info 'installing bootloader...'

  REFIND_CONFIG_LOCATION="/boot/refind_linux.conf"
  BOOT_PART_UUID="$(blkid "$(partition_path 6)" | grep -oP ' UUID="\K[^"]+(?=")')"
  BOOT_STANZA='"Boot with default options"  "root=UUID='"$BOOT_PART_UUID"' rootflags=rw,subvol=@root add_efi_memmap initrd=@root/boot/intel-ucode.img initrd=@root/boot/initramfs-linux.img video=1920x1080"'
  REFIND_CONF="$(cat $BOOTSTRAP_OS_DIR/data/xps15/refind.conf | sed -e "s/##ARCHVOL##/$BOOT_PART_UUID/g")"

  # write the default boot configuration
  echo "$BOOT_STANZA" > "$REFIND_CONFIG_LOCATION"

  refind-install

  echo "$REFIND_CONF" > "/boot/efi/EFI/refind/refind.conf"

  # search the correct BTRFS subvolume for boot files
  sed -e 's|^#also_scan_dirs.*$|also_scan_dirs @root/boot|' /boot/efi/EFI/refind/refind.conf -i

  bstrp_info 'adding service to create snapshot on first boot...'

  cp "$BOOTSTRAP_OS_DIR/data/btrfs/firstbootsnapshot.service" /etc/systemd/system/firstbootsnapshot.service
  systemctl enable firstbootsnapshot

  bstrp_info 'adding user to bumblebee group...'

  usermod -aG bumblebee "$BOOTSTRAP_USERNAME"

  bstrp_info 'enabling bumblebee...'

  systemctl enable bumblebeed

  bstrp_info 'completed device install!'

  os_install_cleanup
}

function device_update() {
  os_update

  sudo bash <<EndOfRefindUpdateScript
  [[ -d /boot/efi/EFI/refind/themes ]] || mkdir /boot/efi/EFI/refind/themes
  if [[ -d /boot/efi/EFI/refind/themes/refind-theme ]]
  then
    cd /boot/efi/EFI/refind/themes/refind-theme
    git pull
  else
    cd /boot/efi/EFI/refind/themes
    git clone https://github.com/liamdawson/refind-theme.git
  fi
EndOfRefindUpdateScript
}

function device_post_config_update() {
  os_post_config_update
}

source "$BOOTSTRAP_OS_DIR/base"
